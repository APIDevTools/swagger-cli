{
  // ESLint config
  // http://eslint.org/docs/rules/

  "ecmaFeatures": {
    "arrowFunctions":                   false,            // enable arrow functions
    "binaryLiterals":                   false,            // enable binary literals
    "blockBindings":                    false,            // enable let and const (aka block bindings)
    "classes":                          false,            // enable classes
    "defaultParams":                    false,            // enable default function parameters
    "destructuring":                    false,            // enable destructuring
    "forOf":                            false,            // enable for-of loops
    "generators":                       false,            // enable generators
    "modules":                          false,            // enable modules and global strict mode
    "objectLiteralComputedProperties":  false,            // enable computed object literal property names
    "objectLiteralDuplicateProperties": false,            // enable duplicate object literal properties in strict mode
    "objectLiteralShorthandMethods":    false,            // enable object literal shorthand methods
    "objectLiteralShorthandProperties": false,            // enable object literal shorthand properties
    "octalLiterals":                    false,            // enable octal literals
    "regexUFlag":                       false,            // enable the regular expression u flag
    "regexYFlag":                       false,            // enable the regular expression y flag
    "restParams":                       false,            // enable the rest parameters
    "spread":                           false,            // enable the spread operator for arrays
    "superInFunctions":                 false,            // enable super references inside of functions
    "templateStrings":                  false,            // enable template strings
    "unicodeCodePointEscapes":          false,            // enable code point escapes
    "globalReturn":                     false,            // allow return statements in the global scope
    "jsx":                              false             // enable JSX
  },

  "env": {
    "browser":                          false,             // browser global variables.
    "node":                             true,             // Node.js global variables and Node.js-specific rules.
    "amd":                              false,            // defines require() and define() as global variables as per the amd spec.
    "mocha":                            true,             // adds all of the Mocha testing global variables.
    "jasmine":                          false,            // adds all of the Jasmine testing global variables for version 0.3 and 0.0.
    "phantomjs":                        false,            // phantomjs global variables.
    "jquery":                           false,            // jquery global variables.
    "prototypejs":                      false,            // prototypejs global variables.
    "shelljs":                          false             // shelljs global variables.
  },

  "globals": {
    // e.g. "angular": true
  },


  "plugins": [
    // e.g. "react" (must run `npm install eslint-plugin-react` first)
  ],

  "rules": {
    ////////// Possible Errors //////////

    "comma-dangle":                     0,                // require or disallow trailing commas in object literals
    "no-cond-assign":                   2,                // disallow assignment in conditional expressions
    "no-console":                       0,                // disallow use of console (off by default in the node environment)
    "no-constant-condition":            2,                // disallow use of constant expressions in conditions
    "no-control-regex":                 2,                // disallow control characters in regular expressions
    "no-debugger":                      2,                // disallow use of debugger
    "no-dupe-keys":                     2,                // disallow duplicate keys when creating object literals
    "no-empty":                         2,                // disallow empty statements
    "no-empty-character-class":         2,                // disallow the use of empty character classes in regular expressions
    "no-ex-assign":                     2,                // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast":            2,                // disallow double-negation boolean casts in a boolean context
    "no-extra-parens":                  0,                // disallow unnecessary parentheses (off by default)
    "no-extra-semi":                    2,                // disallow unnecessary semicolons
    "no-func-assign":                   2,                // disallow overwriting functions written as function declarations
    "no-inner-declarations":            2,                // disallow function or variable declarations in nested blocks
    "no-invalid-regexp":                2,                // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace":          2,                // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs":                2,                // disallow negation of the left operand of an in expression
    "no-obj-calls":                     2,                // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces":                  2,                // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays":                 2,                // disallow sparse arrays
    "no-unreachable":                   2,                // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan":                        2,                // disallow comparisons with the value NaN
    "valid-jsdoc":                     [2, {              // Ensure JSDoc comments are valid (off by default)
      "requireReturn":                  false,            // require an @returns tag for all functions, even if they don't return anything
      "requireParamDescription":        false,            // require a description for all @param tags
      "requireReturnDescription":       false             // require a description for the @returns tag
    }],
    "valid-typeof":                     2,                // Ensure that the results of typeof are compared against a valid string
    "no-unexpected-multiline":          2,                // disallow multi-line statements that could be confused for separte ASI statements


    ////////// Best Practices //////////

    "accessor-pairs":                   2,                // require corresponding getters for any setters
    "block-scoped-var":                 2,                // treat var statements as if they were block scoped (off by default)
    "complexity":                      [2, 8],            // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return":                0,                // require return statements to either always or never specify values
    "curly":                            2,                // specify curly brace conventions for all control statements
    "default-case":                     0,                // require default case in switch statements (off by default)
    "dot-notation":                     2,                // encourages use of dot notation whenever possible
    "dot-location":                    [2, "property"],   // specify the placement of dots in multi-line statements
    "eqeqeq":                           2,                // require the use of === and !==
    "guard-for-in":                     2,                // make sure for-in loops have an if statement (off by default)
    "no-alert":                         0,                // disallow the use of alert, confirm, and prompt
    "no-caller":                        2,                // disallow use of arguments.caller or arguments.callee
    "no-div-regex":                     2,                // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return":                   0,                // disallow else after a return in an if (off by default)
    "no-empty-label":                   2,                // disallow use of labels for anything other then loops and switches
    "no-eq-null":                       2,                // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval":                          2,                // disallow use of eval()
    "no-extend-native":                 2,                // disallow adding to native types
    "no-extra-bind":                    2,                // disallow unnecessary function binding
    "no-fallthrough":                   2,                // disallow fallthrough of case statements
    "no-floating-decimal":              2,                // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implicit-conversion":           0,                // disallow implicit conversion via operators (e.g. !!foo, "" + foo, 1 * foo)
    "no-implied-eval":                  2,                // disallow use of eval()-like methods
    "no-invalid-this":                  2,                // disallow use of "this" outside of classes
    "no-iterator":                      2,                // disallow usage of __iterator__ property
    "no-labels":                        2,                // disallow use of labeled statements
    "no-lone-blocks":                   2,                // disallow unnecessary nested blocks
    "no-loop-func":                     2,                // disallow creation of functions within loops
    "no-multi-spaces":                  0,                // disallow use of multiple spaces
    "no-multi-str":                     2,                // disallow use of multiline strings
    "no-native-reassign":               2,                // disallow reassignments of native objects
    "no-new":                           2,                // disallow use of new operator when not part of the assignment or comparison
    "no-new-func":                      2,                // disallow use of new operator for Function object
    "no-new-wrappers":                  2,                // disallows creating new instances of String, Number, and Boolean
    "no-octal":                         2,                // disallow use of octal literals
    "no-octal-escape":                  2,                // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \050";
    "no-param-reassign":                0,                // disallow reassignment of function parameters
    "no-process-env":                   0,                // disallow use of process.env (off by default)
    "no-proto":                         2,                // disallow usage of __proto__ property
    "no-redeclare":                     2,                // disallow declaring the same variable more then once
    "no-return-assign":                 0,                // disallow use of assignment in return statement
    "no-script-url":                    2,                // disallow use of javascript: urls.
    "no-self-compare":                  2,                // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences":                     2,                // disallow use of comma operator
    "no-throw-literal":                 2,                // disallow throwing non-Error objects
    "no-unused-expressions":           [2, {              // disallow usage of expressions in statement position
      "allowShortCircuit":              true,             // allow short-circuited expressions (e.g. foo && bar())
      "allowTernary":                   true              // allow ternary expressions (e.g. foo ? bar() : baz())
    }],
    "no-useless-call":                  2,                // disallow unnecessary .call() and .apply()
    "no-useless-concat":                2,                // disallow unnecessary concatenation of string literals
    "no-void":                          2,                // disallow use of void operator (off by default)
    "no-warning-comments":              0,                // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-with":                          2,                // disallow use of the with statement
    "radix":                            0,                // require use of the second argument for parseInt() (off by default)
    "vars-on-top":                      0,                // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife":                        2,                // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda":                             2,                // require or disallow Yoda conditions


    ////////// Strict Mode //////////

    "strict":                          [2, "global"],     // require or disallow the "use strict" pragma


    ////////// Variables //////////

    "init-declarations":                0,                // require or disallow variable initialization at definition
    "no-catch-shadow":                  2,                // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var":                    2,                // disallow deletion of variables
    "no-label-var":                     2,                // disallow labels that share a name with a variable
    "no-shadow":                        2,                // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names":       2,                // disallow shadowing of names such as arguments
    "no-undef":                         2,                // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init":                    2,                // disallow use of undefined when initializing variables
    "no-undefined":                     0,                // disallow use of undefined variable (off by default)
    "no-unused-vars":                  [2, {              // disallow declaration of variables that are not used in the code
      "vars":                           "all",            // check "all" variables, or only "local" ones
      "args":                           "none"            // check "all" arguments, "none", or "after-used"
    }],
    "no-use-before-define":            [2, "nofunc"],     // disallow use of variables before they are defined


    ////////// Node.js //////////

    "callback-return":                  2,                // enforce return after a callback
    "global-require":                   2,                // disallow require() outside of the top-level module scope
    "handle-callback-err":              0,                // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires":                0,                // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require":                   2,                // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat":                   2,                // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-exit":                  0,                // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules":            0,                // restrict usage of specified node modules (off by default)
    "no-sync":                          0,                // disallow use of synchronous methods (off by default)


    ////////// Stylistic Issues //////////

    "array-bracket-spacing":           [2, "never"],      // require or disallow space inside array square brackets
    "block-spacing":                   [2, "always"],     // enforce spaces inside of single-line blocks
    "brace-style":                     [2,                // enforce one true brace style (off by default)
      "stroustrup",                                       // brace style ("1tbs", "stroustrup" or "allman")
      {"allowSingleLine":               true}             // allow opening and closing brace to be on the same line
    ],
    "camelcase":                        2,                // require camel case names
    "comma-spacing":                    2,                // enforce spacing before and after comma
    "comma-style":                     [2, "last"],       // enforce one true comma style (off by default)
    "computed-property-spacing":       [2, "never"],      // require or disallow space inside computed property square brackets
    "consistent-this":                 [2, "me"],         // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last":                         2,                // enforce newline at the end of file, with no multiple empty lines
    "func-names":                       0,                // require function expressions to have a name (off by default)
    "func-style":                      [2, "declaration"],// enforces use of function declarations or expressions (off by default)
    "id-length":                        0,                // enforces minimum and maximum identifier lengths (variable names, property names etc.)
    "id-match":                         0,                // require identifiers to match the provided regular expression
    "indent":                          [2, 2, {           // specify tab or space width for your code
      "SwitchCase":                     1,                // indent multipler for "switch" "case" statements
      "VariableDeclarator":             2                 // indent multiplier for indented "var" statements
    }],
    "jsx-quotes":                       0,                // specify whether double or single quotes should be used in JSX attributes
    "key-spacing":                     [2, {              // enforces spacing between keys and values in object literal properties
      "beforeColon":                    false,            // require a space before the colon in a key/value pair
      "afterColon":                     true              // require a space after the colon in a key/value pair
    }],
    "lines-around-comment":            [2, {              // enforce empty lines around comments
      "beforeBlockComment":             true,             // require a blank line before block comments
      "afterBlockComment":              false,            // require a blank line after block comments
      "beforeLineComment":              false,            // require a blank line before line comments
      "afterLineComment":               false,            // require a blank line after line comments
      "allowBlockStart":                true,             // ignore this rule at the start of a code block
      "allowBlockEnd":                  true              // ignore this rule at the end of a code block
    }],
    "linebreak-style":                 [2, "unix"],       // require unix (LF) or windows (CRLF) line endings
    "max-nested-callbacks":            [2, 3],            // specify the maximum depth callbacks can be nested (off by default)
    "new-cap":                          2,                // require a capital letter for constructors
    "new-parens":                       2,                // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var":                0,                // require or disallow an empty newline after variable declarations
    "no-array-constructor":             2,                // disallow use of the Array constructor
    "no-continue":                      0,                // disallow use of the continue statement
    "no-inline-comments":               0,                // disallow comments inline after code (off by default)
    "no-lonely-if":                     0,                // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs":         2,                // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines":         [2, {"max": 2}],   // disallow multiple empty lines (off by default)
    "no-nested-ternary":                0,                // disallow nested ternary expressions (off by default)
    "no-new-object":                    2,                // disallow use of the Object constructor
    "no-restricted-syntax":             0,                // disallow use of certain syntax in code
    "no-spaced-func":                   2,                // disallow spaces after the function name in function calls
    "no-ternary":                       0,                // disallow the use of ternary operators (off by default)
    "no-trailing-spaces":               2,                // disallow trailing whitespace at the end of lines
    "no-underscore-dangle":             0,                // disallow dangling underscores in identifiers
    "no-unneeded-ternary":              2,                // disallow the use of ternary operators when a simpler alternative exists
    "object-curly-spacing":            [2, "never"],      // require or disallow space inside curly brackets
    "one-var":                          0,                // allow just one var statement per function (off by default)
    "operator-assignment":             [2, "always"],     // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "operator-linebreak":              [2, "after"],      // require linebreaks to be placed before or after operators
    "padded-blocks":                   [2, "never"],      // enforce padding within blocks (off by default)
    "quote-props":                     [2, "as-needed"],  // require quotes around object literal property names (off by default)
    "quotes":                          [2, "single"],     // specify whether double or single quotes should be used
    "require-jsdoc":                    2,                // require JSDoc comment
    "semi":                            [2, "always"],     // require or disallow use of semicolons instead of ASI
    "semi-spacing":                    [2, {              // enforce spacing before and after semicolons
      "before":                         false,            // require a space before semicolons
      "after":                          true              // require a space after semicolons when another statement follows
    }],
    "sort-vars":                        0,                // sort variables within the same declaration block (off by default)
    "space-after-keywords":             2,                // require a space after certain keywords (off by default)
    "space-before-keywords":            2,                // require a space after certain keywords (off by default)
    "space-before-blocks":              2,                // require or disallow space before blocks (off by default)
    "space-before-function-paren":     [2, "never"],      // require a space before function parens
    "space-in-parens":                 [2, "never"],      // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops":                  2,                // require spaces around operators
    "space-return-throw-case":          2,                // require a space after return, throw, and case
    "space-unary-ops":                  2,                // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment":                   2,                // require or disallow a space immediately following the // in a comment (off by default)
    "wrap-regex":                       0,                // require regex literals to be wrapped in parentheses (off by default)


    ////////// ECMAScript 6 //////////

    "arrow-parens":                     0,                // require parens in arrow function arguments
    "arrow-spacing":                    2,                // require space before/after arrow function's arrow
    "constructor-super":                2,                // verify calls of super() in constructors
    "generator-star-spacing":          [2, "before"],     // enforce spacing around the * in generator functions
    "no-class-assign":                  2,                // disallow modifying variables of class declarations
    "no-const-assign":                  2,                // disallow modifying variables that are declared using const
    "no-dupe-class-members":            2,                // disallow duplicate name in class members
    "no-this-before-super":             2,                // disallow use of this/super before calling super() in constructors.
    "no-var":                           0,                // require let or const instead of var
    "object-shorthand":                 0,                // require method and property shorthand syntax for object literals
    "prefer-arrow-callback":            0,                // suggest using arrow functions as callbacks
    "prefer-const":                     0,                // suggest using const declaration for variables that are never modified after declared
    "prefer-spread":                    0,                // suggest using the spread operator instead of .apply().
    "prefer-reflect":                   0,                // suggest using Reflect methods where applicable
    "prefer-template":                  0,                // suggest using template literals instead of strings concatenation
    "require-yield":                    2,                // disallow generator functions that do not have yield


    ////////// Legacy //////////

    "max-depth":                        0,                // specify the maximum depth that blocks can be nested (off by default)
    "max-len":                          0,                // specify the maximum length of a line in your program (off by default)
    "max-params":                       0,                // limits the number of parameters that can be used in the function declaration. (off by default)
    "max-statements":                   0,                // specify the maximum number of statement allowed in a function (off by default)
    "no-bitwise":                       2,                // disallow use of bitwise operators (off by default)
    "no-plusplus":                      0                 // disallow use of unary operators, ++ and -- (off by default)
  }
}
